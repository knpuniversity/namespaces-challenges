addsimplenamespacecoding:
    question: |
        Everyone at the office is *starving*, but you want to
        master namespaces before celebrating with lunch. The
        `Pizza` class is great... but let's bring it into the world
        of namespaces!

        Everyone is starving, and depending on you!
    question_steps:
        - Give `Pizza` a namespace - `Food\Tasty`
        - Update `eat.php` to work with this - but **without** adding a `use` statement
    step: add-the-pizza-class
    files:
        eat.php: ~
        Pizza.php: ~
    features:
        editor: ~
        browser:
            default_uri: /eat.php
    grading:
        check_old_class_does_not_exist:
            type: php
            assertFalse: class_exists('Pizza')
            failure: Did you remember to give the `Pizza` class a namespace of `Food\Tasty`
        check_for_new_class:
            type: php
            assertTrue: class_exists('Food\\Tasty\\Pizza')
            failure: The `Pizza` class's `namespace` doesn't look right. Make sure it's `Food\Tasty`
        check_output:
            type: http
            assertTrue: body() matches '/COWP/'
            failure: The output no longer has the COWP! Is something wrong?
        should_be_no_use_statement:
            type: php
            assertFalse: inputContains('eat.php', 'use')
            failure: See if you can create a new `Pizza` class, but *without* a `use` statement.
addusestatementcoding:
    question: |
        That was totally worth waiting on lunch! But now that lunch
        is over we have the energy to clean up a few more things.
    question_steps:
        - Add a `use` statement to `eat.php` for the `Pizza` class
        - Then, shorten the line that creates the new `Pizza`
    step: add-namespace-to-the-pizza-class
    files:
        eat.php: ~
        Pizza.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: /eat.php
    grading:
        check_output:
            type: http
            assertTrue: body() matches '/COWP/'
            failure: The output no longer has the COWP! Is something wrong?
        look_for_use_only:
            type: php
            assertTrue: inputContains('eat.php', 'use ')
            failure: Don't forget to add a `use` statement for the `Pizza` class.
        look_for_use_no_slash:
            type: php
            assertFalse: inputContains('eat.php', 'use \\Food\\Tasty\\Pizza')
            failure: Don't use `\` at the beginning of namespace in the `use` statement. It's not necessary.
        look_for_use_properly:
            type: php
            assertTrue: inputContains('eat.php', 'use Food\\Tasty\\Pizza')
            failure: Yo! You should add a `use` statement for the `Pizza` class!
        look_for_new:
            type: php
            assertFalse: inputContains('eat.php', 'new \\Food\\Tasty\\Pizza')
            failure: Because of the `use` statement, you don't need the full namespace - e.g. `new Food\\Tasty\\Pizza` - when creating the `Pizza` object. Just say `new Pizza()`!
namespaceleadingslashmc:
    question: |
        Check out this `Koala` class:

        ```php
        namespace Animal\Adorable;

        class Koala
        {
        }
        ```

        And this code that uses it:

        ```php
        $koala = new \Animal\Adorable\Koala();
        ```

        Is that first slash in `\Animal\Adorable\Koala` necessary?
    explanation: |
        With no opening slash, PHP thinks you are referring to a
        class that is in the current file's namespace *plus* this
        namespace. For example:

        ```php
        // namespaced_file.php
        namespace Zoo;

        $koala = new Animal\Adorable\Koala();
        // "Class not found Zoo\Animal\Adorable\Koala"
        ```

        ```php
        // no_namespace.php
        $koala = new \Animal\Adorable\Koala();
        // This works!
        ```

        Most of the time you should have a `use` statement anyways,
        But if you use the full namespace, it's much safer to
        include the opening slash: that will *always* work.
    features:
        multiple_choice:
            choices:
                a: |
                    Yes. If you choose to not have a `use` statement,
                    then you must always start with a `\` so that PHP knows
                    to build the namespace from the *root* of all namespaces.
                b: |
                    No. The slash is always optional, and really redundant:
                    PHP knows that you are looking for a class from the root of
                    the namespace.
                c: |
                    It depends on whether or not this file lives in a namespace.
            correct: c
    grading: []
addaliastousestatementcoding:
    question: |
        The intern was messing around and has changed the `use`
        statement for `Pizza` to use an alias: `ItalianTreat`.
    question_steps:
        - Without changing that line, update the `new` line so that the code runs using the new alias.
    step: add-namespace-alias-to-the-pizza-class
    files:
        eat.php: ~
        Pizza.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: /eat.php
    grading:
        check_output:
            type: http
            assertTrue: body() matches '/COWP/'
            failure: The output no longer has the COWP! Is something wrong?
        look_for_aliased_use:
            type: php
            assertTrue: inputContains('eat.php', 'use Food\\Tasty\\Pizza as ItalianTreat;')
            failure: Don't change the `use` line with the `ItalianTreat` alias. Instead, update the line where you create a new instance of the `Pizza` class to work with the `ItalianTreat` alias.
        look_for_new:
            type: php
            assertTrue: inputContains('eat.php', 'new ItalianTreat')
            failure: Did you use the `ItalianTreat` alias for creating an instance of the `Pizza` class?
fixmissingusestatementcoding:
    question: |
        After lunch, the whole team is happily coding with
        namespaces and `use` statements. Suddenly, someone
        sees an error and calls you over for help!

        P.S. This is the *most* common mistake when using namespaces.
    question_steps:
        - Change the code to fix the error
    step: add-the-lunch-class
    files:
        Lunch.php: ~
        eat.php:
            read_only: true
        Pizza.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: /eat.php
    grading:
        check_output:
            type: http
            assertTrue: body() matches '/COWP/'
            failure: The output no longer has the COWP! Is something wrong?
        look_for_return:
            type: php
            assertTrue: inputContains('Lunch.php', 'return new Pizza')
            failure: Woops, you need to fix it without changing the `Pizza` class name in `getFood()` method.
        look_for_use:
            type: php
            assertFalse: inputContains('Lunch.php', 'use \\Food\\Tasty\\Pizza;')
            failure: Don't use `\` at the beginning of namespace in `use` statement. It doesn't necessary.
        look_for_use2:
            type: php
            assertTrue: inputContains('Lunch.php', 'use Food\\Tasty\\Pizza;')
            failure: Seems we need to add a `use` statement for the `Pizza` class in the `Lunch.php` file.
detroitphp2018_conference_challenge:
    question: |
        Aw nuts! We totally forgot to take photos at PHPDetroit. Ok,
        no worries: we've placed some unrelated photos into a `photos/`
        directory - probably nobody will notice the difference.

        Find the photos with Symfony's Finder component and print
        them out in Twig! Everything will be saved!
    question_steps:
        - In `PHPDetroit.php`, add 2 new lines to the `Finder` to *only* find `.png` images that are larger than 30kb! Not sure how? Check out the [Finder docs](https://symfony.com/doc/current/components/finder.html)!
        - Still inside `PHPDetroit`, inside the `foreach`, add each image's filename (e.g. `panda.png`) to the `$photoFilenames` array. Yes! We're now returning the found image names!
        - The photo filenames are passed to `photos.twig` as a `photos` variable. Print out the image filename and check out the result!
    step: conference-setup-code
    files:
        index.php:
            read_only: true
        PHPDetroit.php: ~
        photos.twig: ~
        ConferenceInterface.php:
            read_only: true
    features:
        editor: ~
        browser:
            default_uri: /index.php
    grading:
        look_for_name_filter:
            type: php
            assertTrue: inputContains('PHPDetroit.php', '->name')
            failure: Try using the `->name()` function on the `$finder` object in `PHPDetroit` to only find files ending in `.png`.
        look_for_size_filter:
            type: php
            assertTrue: inputContains('PHPDetroit.php', '->size')
            failure: Try using the `->size()` function on the `$finder` object in `PHPDetroit` to only find files greater than `30K`.
        look_for_size_of_photos_variable:
            type: php
            assertTrue: count(variable('photos')) == 3
            failure: Hmm, the $photos variable in `index.php` should contain 3 items. But, it doesn't look right. Are you returning the 3 `.png` filenames correctly from `PHPDetroit`?
        check_output:
            type: http
            assertTrue: body() matches '/\\/photos\\/woh\\.png/'
            failure: Hmm, I don't see the `/photos/woh.png` img tag in the output.
        check_output2:
            type: http
            assertTrue: body() matches '/\\/photos\\/hiiiiiiii\\.png/'
            failure: Hmm, I don't see the `/photos/hiiiiiiii.png` img tag in the output.
        check_output3:
            type: http
            assertTrue: body() matches '/\\/photos\\/selfie\\.png/'
            failure: Hmm, I don't see the `/photos/selfie.png` img tag in the output.
